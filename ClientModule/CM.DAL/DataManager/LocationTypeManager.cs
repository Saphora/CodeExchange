//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CM.DAL.DataManager
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.Entity;
    using System.Linq;
    using CM.Interfaces;
    using CM.Shared.Entities;
    using CM.DAL.EntityModel;
    public partial class LocationType : LocationTypeMetaManager : IDataManager
    {
        private FCDB DB;
              
        public LocationTypeManager()
        {
            DB = new FCDB();
        }
    
        /// <summary>
        /// Adds an LocationType object to the DbSet of LocationTypes
        /// </summary>
        /// <typeparam name="LocationType">The LocationType to be added.</param>
        protected virtual void _Add(LocationType obj) {
    
                DB.LocationTypes.Add(obj); 
                DB.SaveChanges();
            
        }
    
        /// <summary>
        /// Updates an LocationType object to the DbSet of LocationTypes
        /// </summary>
        /// <typeparam name="LocationType">The LocationType to be updated.</param>
        protected virtual void _Update(LocationType obj) {
    
                DB.Entry<LocationType>(obj).State = EntityState.Modified;
                DB.SaveChanges();
            
        }
        
        /// <summary>
        /// Deletes an LocationType object to the DbSet of LocationTypes
        /// </summary>
        /// <typeparam name="LocationType">The LocationType to be deleted.</param>
        protected virtual void _Delete(LocationType obj) {
    
                DB.Entry<LocationType>(obj).State = EntityState.Deleted;
                DB.SaveChanges();
            
        }
        
        /// <summary>
        /// Get an list of LocationTypes
        /// </summary>
        /// <returns>List of LocationTypes</returns>
        protected virtual IEnumerable<LocationType> _GetList() {
            return DB.LocationTypes.Select(s=>s);
        }
    
        /// <summary>
        /// Detaches an LocationType object from the object state manager.
        /// </summary>
        /// <typeparam name="LocationType">The LocationType to be detached.</param>
        public virtual void Detach(Object obj) 
    	{
            DB.Entry<LocationType>((LocationType)obj).State = EntityState.Detached;
            DB.SaveChanges();   
        }
        
        /// <summary>
        /// Adds an LocationType object to the DbSet of LocationTypes
        /// </summary>
        /// <typeparam name="LocationType">The LocationType to be added.</param>
        public virtual void Add(Object obj) 
    	{
            _Add((LocationType)obj);
        }
    
        /// <summary>
        /// Updates an LocationType object to the DbSet of LocationTypes
        /// </summary>
        /// <typeparam name="LocationType">The LocationType to be updated.</param>
        public virtual void Update(Object obj) 
    	{
            _Update((LocationType)obj);
        }
        
        /// <summary>
        /// Deletes an LocationType object to the DbSet of LocationTypes
        /// </summary>
        /// <typeparam name="LocationType">The LocationType to be deleted.</param>
        public virtual void Delete(Object obj) 
    	{
            _Delete((LocationType)obj);
        }
        
        /// <summary>
        /// Get an list of LocationTypes
        /// </summary>
        /// <returns>List of LocationTypes</returns>
        public virtual IEnumerable<LocationType> GetList() 
    	{
            return _GetList();
        }
        
    
    }
}
